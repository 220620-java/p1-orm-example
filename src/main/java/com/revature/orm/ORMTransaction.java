package com.revature.orm;

import java.sql.SQLException;
import java.util.List;

public interface ORMTransaction<T> {
	/**
	 * Add a DML statement to the transaction. The statements that have been added will not run 
	 * until {@link com.revature.orm.ORMTransaction#execute() execute()} is called.
	 * 
	 * @param keyword INSERT, UPDATE, or DELETE (not case-sensitive)
	 * @param obj the object to be inserted, updated, or deleted
	 * @return the current transaction so that more statements can be added.
	 * @throws SQLException 
	 * @throws InvalidKeywordException when keyword passed in is not INSERT, UPDATE, or DELETE
	 */
	public ORMTransaction<T> addStatement(String keyword, Object obj) throws SQLException;
	/**
	 * Executes the statements that have been added to this transaction.
	 * 
	 * @return the number of rows executed.
	 * @throws SQLException 
	 */
	public int execute() throws SQLException;
	/**
	 * Retrieves the key values generated by INSERT statements within the transaction.
	 * 
	 * @return a list of key values that were generated
	 */
	public List<Object> getGeneratedKeys();
	/**
	 * Commits the transaction and closes the connection.
	 * 
	 * @throws SQLException
	 */
	public void commit() throws SQLException;
	/**
	 * Rolls back the transaction and removes all statements that were added.
	 * 
	 * @throws SQLException
	 */
	public void rollback() throws SQLException;
	/**
	 * Rolls back to a specific savepoint and removes any statements that were 
	 * after that savepoint.
	 * 
	 * @param name the name of the savepoint to roll back to
	 * @throws SQLException
	 */
	public void rollbackToSavepoint(String name) throws SQLException;
	/**
	 * Adds a savepoint with the specified name after the previously added 
	 * statement.
	 * 
	 * @param name the name of the new savepoint
	 * @return
	 */
	public ORMTransaction<T> addSavepoint(String name);
	/**
	 * Closes the connection.
	 * 
	 * @throws SQLException
	 */
	public void close() throws SQLException;
}
